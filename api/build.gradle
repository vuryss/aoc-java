import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'io.quarkus'
}

group = 'com.vuryss.aoc.api'
version = '1.0'

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    cliTool {
        canBeConsumed = false
        canBeResolved = true
        canBeDeclared = true
        description = 'A resolvable configuration to hold the dependency on the CLI tool\'s uber-jar.'
    }
}

// Prepare the CLI uber-jar in a side folder (NOT on the classpath) so Quarkus doesn't scan it
// It will be copied to $buildDir/cli/cli.jar and referenced from there at runtime
tasks.register('prepareCliJar', Copy) {
    from(configurations.cliTool)
    into layout.buildDirectory.dir('quarkus-app')
    rename { 'cli.jar' }
    outputs.upToDateWhen { task ->
        def outputFile = new File(task.destinationDir, 'cli.jar')
        println("Checking if CLI jar exists: ${outputFile.exists()}")
        return outputFile.exists()
    }
}

clean {
    finalizedBy tasks.named('prepareCliJar')
}

dependencies {
    implementation(platform(project(":platform")))

    implementation project(':core')

    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-rest-jackson'
    implementation 'io.quarkus:quarkus-hibernate-validator'
    implementation libs.quarkus.resteasy.problem
    implementation libs.nuprocess

    cliTool project(path: ':cli', configuration: 'executableElements')

    compileOnly libs.jetbrains.annotations

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    dependsOn tasks.named('prepareCliJar')
    useJUnitPlatform()

//    testLogging {
//        // set options for log level LIFECYCLE
//        events TestLogEvent.FAILED,
//                TestLogEvent.PASSED,
//                TestLogEvent.SKIPPED,
//                TestLogEvent.STANDARD_OUT
//        exceptionFormat = TestExceptionFormat.FULL
//        showExceptions = true
//        showCauses = true
//        showStackTraces = true
//
//        // set options for log level DEBUG and INFO
//        debug {
//            events TestLogEvent.STARTED,
//                    TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
//            exceptionFormat = TestExceptionFormat.FULL
//        }
//
//        info.events = debug.events
//        info.exceptionFormat = debug.exceptionFormat
//    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

tasks.named('build') { dependsOn tasks.named('prepareCliJar') }
// Also useful during dev mode so the jar is present
tasks.matching { it.name == 'quarkusDev' }.configureEach { dependsOn tasks.named('prepareCliJar') }
